import numpy as np
from numpy import array
import algorithms
import croupier
import dice

np.set_printoptions(precision=3)

# OBSERVATION_LENGTH = 20
# OBSERVATIONS = 50

# # Prepare environment for our simulation
# # fair_dice = dice.Dice(np.array([1/6, 1/6, 1/6, 1/6, 1/6, 1/6]))
# # loaded_dice = dice.Dice(np.array([1/10, 1/10, 1/10, 1/10, 1/10, 1/2]))
# fair_dice = dice.Dice(np.array([1/5, 1/5, 1/5, 1/5, 1/5, 0]))
# loaded_dice = dice.Dice(np.array([0, 0, 0, 0, 0, 1]))
# initial_dice_probability = np.array([0.5, 0.5])  # Croupier can use either of dices initially
# transition_matrix = np.array([
#     [0.75, 0.25],  # Fair -> Fair = 0.95, Fair -> Loaded = 0.05
#     [0.20, 0.80],  # Loaded -> Fair = 0.10, Loaded -> Loaded = 0.90
# ])
# my_croupier = croupier.Croupier(fair_dice, loaded_dice, initial_dice_probability, transition_matrix)


print('+----------------------------+')
print('|    Baum-Welch Algorithm    |')
print('+----------------------------+')

# Pass training observations to Baum-Welch algorithm
Ys=[array([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]),
 array([4, 0, 3, 4, 4, 4, 4, 1, 4, 5, 0, 3, 3, 5, 5, 5, 5, 5, 5, 5]),
 array([5, 5, 5, 2, 1, 2, 2, 2, 2, 3, 1, 2, 0, 1, 0, 3, 1, 5, 5, 5]),
 array([3, 5, 2, 2, 2, 3, 4, 4, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0]),
 array([2, 5, 3, 2, 5, 3, 1, 3, 3, 1, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5]),
 array([5, 5, 0, 4, 1, 1, 5, 3, 5, 0, 3, 5, 5, 5, 5, 2, 1, 0, 3, 5]),
 array([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 2, 4]),
 array([2, 0, 0, 2, 5, 5, 5, 0, 2, 0, 2, 1, 5, 5, 5, 5, 5, 5, 5, 5]),
 array([5, 5, 5, 5, 3, 5, 5, 5, 5, 3, 0, 5, 5, 1, 2, 5, 4, 4, 2, 4]),
 array([1, 3, 3, 2, 2, 5, 5, 1, 0, 3, 3, 5, 0, 0, 2, 5, 5, 2, 5, 3]),
 array([2, 5, 1, 3, 0, 3, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 4, 2, 3, 3]),
 array([5, 5, 5, 2, 4, 0, 4, 4, 3, 5, 5, 4, 3, 3, 1, 2, 0, 1, 0, 4]),
 array([1, 5, 4, 5, 5, 5, 4, 4, 4, 1, 5, 5, 5, 5, 4, 5, 5, 3, 2, 4]),
 array([1, 3, 3, 5, 4, 0, 3, 4, 3, 0, 3, 4, 4, 2, 2, 5, 5, 5, 5, 5]),
 array([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 4, 2, 5]),
 array([4, 3, 0, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 2, 0, 5, 5]),
 array([5, 5, 5, 5, 1, 1, 5, 5, 5, 5, 5, 5, 5, 0, 3, 1, 2, 2, 5, 2]),
 array([2, 3, 5, 0, 3, 4, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 4]),
 array([1, 0, 1, 3, 5, 2, 3, 0, 1, 5, 5, 5, 1, 3, 5, 2, 4, 2, 4, 0]),
 array([3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4]),
 array([3, 1, 2, 5, 5, 5, 5, 5, 5, 2, 4, 5, 5, 5, 5, 5, 5, 4, 0, 1]),
 array([4, 2, 4, 5, 5, 0, 3, 1, 4, 2, 0, 2, 4, 2, 5, 5, 5, 5, 5, 5]),
 array([5, 0, 5, 0, 1, 5, 1, 2, 1, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5]),
 array([0, 4, 1, 0, 1, 1, 0, 3, 1, 3, 4, 1, 0, 5, 5, 0, 5, 5, 5, 5]),
 array([5, 3, 1, 5, 5, 4, 5, 5, 3, 2, 2, 1, 5, 5, 5, 5, 5, 5, 5, 5]),
 array([5, 5, 5, 0, 2, 1, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 0]),
 array([1, 1, 5, 5, 5, 5, 5, 3, 4, 3, 0, 5, 5, 2, 1, 4, 0, 2, 4, 1]),
 array([3, 3, 4, 2, 3, 5, 5, 5, 5, 5, 2, 4, 5, 5, 1, 2, 4, 5, 4, 5]),
 array([5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 0, 0]),
 array([5, 5, 5, 5, 4, 1, 2, 2, 4, 4, 2, 3, 0, 5, 5, 5, 5, 5, 5, 3]),
 array([5, 5, 3, 3, 4, 1, 1, 5, 5, 0, 3, 3, 0, 4, 3, 3, 2, 0, 5, 5]),
 array([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 1, 4, 0, 5, 3, 0]),
 array([0, 4, 4, 4, 4, 1, 3, 1, 0, 5, 5, 5, 5, 5, 3, 1, 0, 4, 4, 2]),
 array([2, 1, 5, 5, 5, 2, 5, 5, 5, 1, 5, 5, 5, 5, 5, 3, 2, 4, 0, 2]),
 array([4, 0, 1, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]),
 array([5, 5, 5, 5, 4, 3, 0, 1, 5, 5, 1, 5, 5, 5, 5, 5, 2, 5, 5, 0]),
 array([0, 1, 1, 0, 4, 3, 0, 0, 2, 0, 2, 0, 2, 2, 3, 1, 4, 3, 3, 4]),
 array([4, 5, 5, 5, 5, 5, 3, 0, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5]),
 array([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 3, 3, 5, 5, 5]),
 array([5, 5, 3, 3, 1, 1, 5, 5, 5, 4, 1, 2, 2, 0, 1, 4, 5, 5, 5, 5]),
 array([5, 5, 4, 1, 5, 3, 5, 5, 5, 3, 2, 5, 5, 5, 5, 1, 2, 0, 4, 2]),
 array([1, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]),
 array([4, 5, 5, 5, 5, 5, 1, 2, 5, 4, 3, 3, 1, 5, 5, 5, 5, 5, 5, 5]),
 array([3, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 4, 3, 1, 2, 3, 5, 5]),
 array([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]),
 array([5, 5, 5, 5, 4, 5, 4, 0, 4, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5]),
 array([5, 5, 5, 1, 4, 1, 4, 0, 3, 1, 0, 5, 5, 5, 5, 5, 0, 5, 5, 5]),
 array([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 2, 4, 5, 0, 5]),
 array([5, 5, 5, 5, 5, 3, 1, 1, 2, 1, 1, 4, 3, 5, 2, 0, 0, 0, 5, 1]),
 array([3, 2, 5, 4, 0, 5, 0, 5, 5, 5, 3, 4, 2, 2, 5, 3, 3, 3, 1, 4])]

emMat=array([[0.146, 0.245, 0.096, 0.138, 0.116, 0.259],[0.227, 0.24 , 0.181, 0.024, 0.13 , 0.198]])
# YsT=[[y] for y in Ys]
pi0=array([0.945, 0.055])
T=array([[0.504, 0.496],
       [0.385, 0.615]])
first_dice, second_dice, initial_dice_probability, transition_matrix = algorithms.baum_welch(Ys,T=T,emMat=emMat,pi0=pi0)

